(define (make-sum a b) (list a ‘+ b))

(define (make-product a b) (list a ‘* b))

(define (sum? x)
  (and (pair? x) (eq? (cadr x) ‘+)))

(define (addend x)
  (car x))

(define (augend x)
  (caddr x))

(define (product? x)
  (and (pair? x) (eq? (cadr x) ‘*)))

(define (multiplier x)
  (car x))

(define (multiplicand x)
  (caddr x))

**Part B**

(define (make-sum a b)
  (cond ((=number? a 0) b)
        ((=number? b 0) a)
        ((and (number? a) (number? b)) (+ a b))
        ((or (and (product? a) (product? b))
             (or (product? a) (product? b)))
         (append (append a (list '+)) b))
        (else (list a '+ b))))

(define (make-product a b)
  (cond ((or (=number? a 0) (=number? b 0)) 0)
        ((=number? a 1) b)
        ((=number? b 1) a)
        ((and (number? a) (number? b)) (* a b))
        (else (list a '* b))))
